import{r as l,M as c,e as u}from"./entry.a426b012.js";import{s as d}from"./projection.b5b0482a.js";import{u as a,d as O,S,T as v,s as y,v as h,y as P,O as b,b as x,m as g,h as N}from"./dataUtils.ceee447f.js";import{y as w,G as J,f as _,D as z}from"./utils2.4646396a.js";import"./colorUtils.0c057879.js";var D=Object.defineProperty,B=Object.defineProperties,$=Object.getOwnPropertyDescriptors,f=Object.getOwnPropertySymbols,j=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable,p=(o,e,t)=>e in o?D(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t,T=(o,e)=>{for(var t in e||(e={}))j.call(e,t)&&p(o,t,e[t]);if(f)for(var t of f(e))k.call(e,t)&&p(o,t,e[t]);return o},E=(o,e)=>B(o,$(e));class A{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),r=O(t,e.type);return Promise.resolve(l(r)&&r.toJSON())}async decode(e){const t=await S(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?c.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(l(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=v.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(l(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=y(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=h(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((r,s)=>{t.set(s,r==null?void 0:r.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){var t;const r=e.srcPixelBlocks.map(m=>m?new a(m):null),s=P(r,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let i,n=s;return e.coefs&&(n=b(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(i=x(e.destDimension,e.gcsGrid),n=u(g(n,e.isUV?"vector-uv":"vector-magdir",i))),{pixelBlock:(t=n)==null?void 0:t.toJSON(),localNorthDirections:i}}async createStreamlinesMesh(e,t){const r={data:new Float32Array(e.flowData.buffer),width:e.flowData.width,height:e.flowData.height},{vertexData:s,indexData:i}=await N(e.rendererSettings,r,t.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:i.buffer},transferList:[s.buffer,i.buffer]}}async getProjectionOffsetGrid(e){const t=c.fromJSON(e.projectedExtent),r=c.fromJSON(e.srcBufferExtent);let s=null;e.datumTransformationSteps&&(s=new d({steps:e.datumTransformationSteps})),(e.includeGCSGrid||w(t.spatialReference,r.spatialReference,s))&&await J();const i=e.rasterTransform?_(e.rasterTransform):null;return z(E(T({},e),{projectedExtent:t,srcBufferExtent:r,datumTransformation:s,rasterTransform:i}))}}export{A as default};
